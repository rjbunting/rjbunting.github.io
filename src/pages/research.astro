---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

// Load manual scholar metrics from src/data/scholar.json
const metricsModule = await import('../data/scholar.json');
const metrics = metricsModule.default ?? metricsModule;

// Fetch all research posts and sort by pubDate desc
const researchposts = await getCollection("research");
researchposts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Pagination via ?page=N (1-based). Page size kept at 10 to match previous behaviour.
const url = new URL(Astro.request.url);
const pageSize = 10;
const currentPage = Math.max(1, parseInt(url.searchParams.get('page') || '1', 10) || 1);
const total = researchposts.length;
const pageCount = Math.max(1, Math.ceil(total / pageSize));
const pageIndex = Math.min(currentPage, pageCount);
const start = (pageIndex - 1) * pageSize;
const pageEntries = researchposts.slice(start, start + pageSize);

// Render the full content for all posts on the current page so expanded panels can show full write-ups
const renderedEntries = await Promise.all((pageEntries || []).map(async (p) => {
  // cast to any because the collection entry type may not expose render() in TS types here
  const rendered = await ((p as any).render?.() as any) || {};
  // prefer html string where available to avoid using a dynamic component tag
  return { entry: p, html: rendered?.html ?? null };
}));

const prevUrl = pageIndex > 1 ? `/research?page=${pageIndex - 1}` : null;
const nextUrl = pageIndex < pageCount ? `/research?page=${pageIndex + 1}` : null;

const page = {
  data: pageEntries,
  url: {
    prev: prevUrl,
    next: nextUrl,
  }
};
---

<BaseLayout title="Research" sideBarActiveItemID="research" wide={true}>
  <!-- Hero / summary with research focus and compact metrics column -->
  <section class="bg-base-200 text-base-content rounded-lg p-6 mb-0 flex flex-col md:flex-row items-start gap-6 no-hover-scale">
    <div class="flex-1">
      <h1 class="text-3xl w-full font-bold mb-3">Bridging Theory and Experiment</h1>
      <p class="text-lg mb-4 opacity-95">
        My research centres on developing new methods, implementing new models, and enhancing workflows to bridge the
          scales between theory and experiment. Research topics focus on pressing challenges in catalysis, energy,
          materials, and the natural world. I deepen our understanding of processes such as chemical reactions,
          the effects of microstructure, nucleation, and degradation.
      </p>

      <!-- Publications link removed from left column; moved to metrics column on the right -->
    </div>

    <!-- Inline metrics column inside the hero (compact and visible on md+) -->
    <div class="w-full md:w-56 flex-shrink-0 grid grid-cols-3 md:grid-cols-1 gap-3">
      <div class="bg-base-100 rounded-lg p-3 text-center shadow-sm cursor-pointer allow-hover">
        <div class="text-2xl font-bold"><span class="counter" data-target={String(metrics.publications)} data-duration="900">0</span></div>
        <div class="text-xs text-muted">Publications</div>
      </div>
      <div class="bg-base-100 rounded-lg p-3 text-center shadow-sm cursor-pointer allow-hover">
        <div class="text-2xl font-bold"><span class="counter" data-target={String(metrics.citations)} data-duration="1200">0</span></div>
        <div class="text-xs text-muted">Citations</div>
      </div>
      <div class="bg-base-100 rounded-lg p-3 text-center shadow-sm cursor-pointer allow-hover">
        <div class="text-2xl font-bold"><span class="counter" data-target={String(metrics.h_index)} data-duration="1000">0</span></div>
        <div class="text-xs text-muted">h-index</div>
      </div>
      <div class="md:hidden text-xs text-muted mt-1 col-span-3">Metrics sourced from Google Scholar.<br/>Last updated: {metrics.lastUpdated}</div>

      <!-- Visible tag on md+ showing metrics source and last-updated time -->
      <div class="hidden md:block text-xs text-muted mt-1 text-center">Metrics from Google Scholar<br/><span class="block">Last updated: {metrics.lastUpdated}</span></div>

      <!-- Publications link placed below the metrics on the right (spans full width on small screens) -->
      <div class="col-span-3 md:col-auto mt-2 flex justify-center md:justify-center">
        <a href="/publications" class="btn btn-primary btn-sm w-full md:w-auto" aria-label="View publications">See publications</a>
      </div>
    </div>
  </section>

  <!-- New: Models development section with interactive two-image slider -->
  <section id="models" class="bg-base-100 rounded-lg p-6 mb-0 no-hover-scale">
     <div class="max-w-4xl mx-auto relative">
      <h2 class="text-2xl font-semibold mb-3">Modeling Experiments</h2>
      <p class="text-base mb-4 text-muted">
          The modeling of chemical systems with ab initio techniques has remained largely unchanged since its conception
          as a field. Models are limited to cluster or slab models, where surfaces are engineered to consider defects or
          different stepped surfaces. These models are far from the physical systems, where several macro-scale processes
          take place, such as grain boundary formation, Ostwald ripening, sintering, and surface evolution. With new methods,
          machine learning acceleration, and experimental feedback, I model systems that better describe their physical counterpart.
      </p>

      <div class="relative w-full overflow-hidden rounded-lg shadow-md select-none allow-hover" id="comparison-slider" style="max-height:420px; background-color: #fff;" aria-label="Past vs future comparison">

        <!-- Past/Future buttons (overlayed on the images only) -->
        <div id="btn-past" class="absolute top-3 left-3 z-50 cursor-pointer" role="button" tabindex="0" aria-label="Show past" style="pointer-events:auto;">
          <div class="bg-base-200 text-sm text-base-content px-3 py-1 rounded shadow-sm border border-base-300">◀ Past</div>
        </div>
        <div id="btn-future" class="absolute top-3 right-3 z-50 cursor-pointer" role="button" tabindex="0" aria-label="Show future" style="pointer-events:auto;">
          <div class="bg-base-200 text-sm text-base-content px-3 py-1 rounded shadow-sm border border-base-300">Future ▶</div>
        </div>

        <!-- Bottom image (future) -->
        <div class="absolute inset-0 flex items-center justify-center" style="position:relative; z-index:10; background-color:#fff; padding:0;">
          <img src="/images/realbzo.png" alt="Future / model prediction view" style="max-width:35%; max-height:74%; object-fit:contain; object-position:center center; display:block;" />
        </div>

         <!-- Past image (static) -->
        <div id="past-img" class="absolute inset-0 flex items-center justify-center" style="position:absolute; left:0; top:0; z-index:20; transform:none; pointer-events:none; will-change:clip-path; background-color:#fff; padding:0;">
          <img src="/images/smallbzo.png" alt="Past / experimental view" style="max-width:40%; max-height:74%; object-fit:contain; object-position:center center; display:block;" />
        </div>
        <!-- Draggable handle (divider line and rail) -->
        <div id="handle" class="absolute top-0 h-full flex items-center justify-center z-40" style="left:50%" role="slider" aria-valuemin="0" aria-valuemax="100" aria-valuenow="50" aria-label="Reveal timeline (drag left for past, right for future)">
          <div class="relative flex items-center justify-center h-full w-full">
            <div class="absolute left-1/2 -translate-x-1/2 h-full w-1 bg-black/60 shadow-md" style="filter:drop-shadow(0 1px 4px rgba(0,0,0,0.35)); opacity:0.85;"></div>
            <div class="absolute left-1/2 -translate-x-1/2 h-full w-6 rounded bg-black/10 pointer-events-none" style="opacity:0.6;"></div>

            <!-- Circular knob (visible, draggable) -->
            <div class="divider-knob absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-10 h-10 md:w-12 md:h-12 rounded-full bg-base-100 border-2 border-black/10 shadow-lg flex items-center justify-center z-50 pointer-events-auto" style="touch-action:none;">
              <!-- decorative inner indicator -->
              <div class="opacity-70 text-sm md:text-base">‹ ›</div>
            </div>
          </div>
         </div>

      </div>

      <script>
        (function(){
          const slider = document.getElementById('comparison-slider');
          const pastImg = document.getElementById('past-img');
          const handleEl = document.getElementById('handle');

          if (!slider || !pastImg || !handleEl) return;

          const past = pastImg;
          const handle = handleEl;
          const knob = handle.querySelector('.divider-knob');

          let currentPos = 50;
          let dragging = false;

          const setPosition = (percent, { animate = false } = {}) => {
            const clamped = Math.max(0, Math.min(100, percent));
            const clipRight = 100 - clamped;

            if (animate) {
              past.style.transition = 'clip-path .25s ease, transform 0s';
              handle.style.transition = 'left .25s ease';
            } else {
              past.style.transition = 'none';
              handle.style.transition = 'none';
            }

            past.style.clipPath = `inset(0 ${clipRight}% 0 0)`;
            past.style.transform = 'none';
            handle.style.left = clamped + '%';

            currentPos = clamped;
            handle.setAttribute('aria-valuenow', String(clamped));
          };

          const resolvePositionFromX = (clientX) => {
            const rect = slider.getBoundingClientRect();
            return ((clientX - rect.left) / rect.width) * 100;
          };

          const onPointerDown = (e) => {
            dragging = true;
            try { e.target.setPointerCapture && e.target.setPointerCapture(e.pointerId); } catch (err) {}
            const rel = resolvePositionFromX(e.clientX);
            setPosition(rel);
            e.preventDefault();
          };

          const onPointerMove = (e) => {
            if (!dragging) return;
            const rel = resolvePositionFromX(e.clientX);
            setPosition(rel);
          };

          const onPointerUp = (e) => {
            if (!dragging) return;
            dragging = false;
            try { e.target.releasePointerCapture && e.target.releasePointerCapture(e.pointerId); } catch (err) {}
            setPosition(currentPos, { animate: true });
          };

          handle.addEventListener('pointerdown', onPointerDown);
          window.addEventListener('pointermove', onPointerMove);
          window.addEventListener('pointerup', onPointerUp);

          const setDraggingUi = (isDragging) => {
            document.body.style.userSelect = isDragging ? 'none' : '';
            handle.style.cursor = isDragging ? 'grabbing' : 'grab';
            if (knob instanceof HTMLElement) {
              knob.style.transition = 'transform .18s ease, box-shadow .18s ease';
              knob.style.transform = isDragging
                ? 'translate(-50%, -50%) translateY(-2px) scale(1.03)'
                : 'translate(-50%, -50%) scale(1)';
             knob.style.boxShadow = isDragging ? '0 8px 20px rgba(0,0,0,0.18)' : '0 6px 14px rgba(0,0,0,0.12)';
           }
          };

          const _onPointerDown = (e) => { setDraggingUi(true); onPointerDown(e); };
          const _onPointerUp = (e) => { setDraggingUi(false); onPointerUp(e); };
          handle.removeEventListener('pointerdown', onPointerDown);
          handle.addEventListener('pointerdown', _onPointerDown);
          window.removeEventListener('pointerup', onPointerUp);
          window.addEventListener('pointerup', _onPointerUp);

          try { handle.style.touchAction = 'none'; } catch (err) {}

          slider.tabIndex = 0;
          slider.addEventListener('keydown', (e) => {
            const step = e.shiftKey ? 10 : 5;
            let cur = currentPos;
            if (e.key === 'ArrowLeft') { cur -= step; setPosition(cur, { animate: true }); e.preventDefault(); }
            if (e.key === 'ArrowRight') { cur += step; setPosition(cur, { animate: true }); e.preventDefault(); }
            if (e.key === 'Home') { setPosition(0, { animate: true }); e.preventDefault(); }
            if (e.key === 'End') { setPosition(100, { animate: true }); e.preventDefault(); }
          });

          const btnPast = document.getElementById('btn-past');
          const btnFuture = document.getElementById('btn-future');
          if (btnPast) {
            btnPast.addEventListener('pointerdown', (ev) => { ev.stopPropagation(); ev.preventDefault(); setPosition(80, { animate: true }); });
            btnPast.addEventListener('click', (ev) => { ev.stopPropagation(); setPosition(80, { animate: true }); });
            btnPast.addEventListener('keydown', (ev) => { if (ev.key === 'Enter' || ev.key === ' ') { ev.preventDefault(); ev.stopPropagation(); setPosition(80, { animate: true }); } });
          }
          if (btnFuture) {
            btnFuture.addEventListener('pointerdown', (ev) => { ev.stopPropagation(); ev.preventDefault(); setPosition(20, { animate: true }); });
            btnFuture.addEventListener('click', (ev) => { ev.stopPropagation(); setPosition(20, { animate: true }); });
            btnFuture.addEventListener('keydown', (ev) => { if (ev.key === 'Enter' || ev.key === ' ') { ev.preventDefault(); ev.stopPropagation(); setPosition(20, { animate: true }); } });
          }

          setPosition(currentPos);

          window.addEventListener('resize', () => { /* noop */ });
        })();
      </script>
    <style>
      /* Ensure any transparency in the comparison images renders over white */
      #comparison-slider { background-color: #fff; }
      #comparison-slider img { background-color: #fff; }
      /* Prevent the small overlay buttons from shifting on active/pressed states (override any framework defaults)
         and remove tap highlight on mobile so elements don't appear to jump. */
      #btn-past > div, #btn-future > div {
        touch-action: manipulation;
        transform: translateZ(0);
      }
      #btn-past > div:active, #btn-future > div:active {
        transform: none !important;
      }
      /* Ensure the knob remains visually centered when inline transforms are applied */
      .divider-knob { transform-origin: center; }

      /* Responsive tweak: on narrow screens allow images to be a bit larger so they remain usable */
      @media (max-width: 640px) {
        #comparison-slider img { max-width: 92% !important; max-height: 86% !important; }
      }
    </style>
    </div>
  </section>

  <!-- Research themes: highlight research posts as a separate top-level section -->
  <section id="research-themes" class="mt-4 mb-8 reveal">

    <!-- Panels: clicking a theme expands it into a full section on the page -->
    <div class="bg-base-100 rounded-lg p-4 shadow-sm">
      <div id="themes-panels" class="space-y-0">
      {
        /* Use pre-rendered Content components for every entry on the current page so expanded panels show full write-ups */
        renderedEntries.map(({ entry, html }, i) => (
          <details class="group p-3 border-b border-base-200 last:border-b-0" data-index={String(i)}>
            <summary class="flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4 cursor-pointer list-none p-4 md:p-6 rounded-md min-h-[64px] md:min-h-[88px]">
              {
                entry.data.heroImage && (
                  // Ensure alt text is plain (strip any simple HTML tags) for accessibility
                  <img src={entry.data.heroImage} alt={String(entry.data.title ?? '').replace(/<[^>]*>/g, '')} class="w-full h-40 sm:w-28 sm:h-16 md:w-32 md:h-20 rounded object-cover flex-shrink-0 mb-3 sm:mb-0" style="aspect-ratio:16/9; object-fit:cover;" />
                )
              }
              <span class="flex-1 text-left">
                <span class="flex items-center justify-between gap-3">
                  <span class="flex items-center gap-3">
                    {/* Render title as HTML so subscripts/superscripts in the frontmatter show correctly */}
                    <span class="text-base md:text-lg font-semibold" set:html={String(entry.data.title ?? '')}></span>
                    {entry.data.badge && <span class="badge badge-secondary">{entry.data.badge}</span>}
                  </span>
                  <span class="text-sm text-muted hidden md:block">Click to expand</span>
                </span>
                <span class="text-sm text-muted mt-1">{entry.data.description}</span>
              </span>
              <span class="mt-2 sm:mt-0 sm:ml-4 text-2xl md:text-3xl transition-transform duration-200 group-open:rotate-90">▸</span>
            </summary>

            <!-- Reduced top margin to tighten spacing when expanded -->
            <div class="details-body mt-2 grid grid-cols-1 md:grid-cols-12 gap-4 items-start justify-center">
               {
                 /* Removed hero image from expanded content per request. The summary still shows the preview image. */
               }
               <div class="md:col-start-3 md:col-span-8">
                 <!-- Title removed from expanded content (already displayed in the summary) -->
                 {/* Render full post content (markdown) */}
                <div class="prose max-w-none mb-4" set:html={String(html ?? '')}></div>
                <div class="flex gap-2 items-center">
                  {Array.isArray((entry.data as any).tags) ? (entry.data as any).tags.map((t) => <span class="badge badge-outline">{t}</span>) : null}
                </div>
              </div>
            </div>
          </details>
        ))
      }
      </div>
    </div>

    <script>
      (function(){
        const container = document.getElementById('themes-panels');
        if (!container) return;
        const details = Array.from(container.querySelectorAll('details'));
        // ensure only one panel open at a time
        details.forEach((d) => {
          d.addEventListener('toggle', () => {
            if (!d.open) return;
            details.forEach((other) => { if (other !== d) other.open = false; });
            // scroll expanded panel into view on small screens
            setTimeout(() => { d.scrollIntoView({ behavior: 'smooth', block: 'start' }); }, 60);
          });
        });

        // Close all panels on Escape (single handler)
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') details.forEach((d) => d.open = false);
        });
      })();
    </script>
    <style>
      /* Smooth open/close for <details> content */
      details .details-body {
        max-height: 0;
        overflow: hidden;
        opacity: 0;
        transition: max-height .42s cubic-bezier(.2,.9,.2,1), opacity .28s ease;
      }
      details[open] .details-body {
        max-height: 2400px;
        opacity: 1;
      }

      details summary:focus {
        outline: 2px solid rgba(59,130,246,0.6);
        outline-offset: 4px;
      }

      details.group > summary {
        transition: background-color .12s ease, transform .12s ease, box-shadow .12s ease, border-color .12s ease;
        will-change: transform, box-shadow, background-color;
        cursor: pointer;
      }

      details.group:hover > summary {
        background-color: rgba(15, 23, 42, 0.03);
        transform: translateY(-2px);
        box-shadow: 0 6px 18px rgba(2,6,23,0.06);
      }

      details.group[open] > summary {
        background-color: rgba(15, 23, 42, 0.04);
        transform: none;
        box-shadow: 0 10px 30px rgba(2,6,23,0.08);
        border-color: rgba(59,130,246,0.08);
      }

      details.group > summary > .group-open\:rotate-90 { transition: transform .18s ease; }

      #themes-panels,
      #themes-panels .group,
      #themes-panels .group > summary,
      details.group {
        overflow: visible;
      }

      details.group > summary {
        position: relative;
        z-index: 1;
        backface-visibility: hidden;
        -webkit-backface-visibility: hidden;
        will-change: transform, box-shadow;
      }

      details.group[open] > summary { z-index: 3; }

      @media (max-width: 640px) {
        details.group > summary { min-height: 56px; padding: 0.7rem 0.9rem; }
        details summary .line-clamp-2, details summary .line-clamp-3 { -webkit-line-clamp: unset !important; overflow: visible !important; display: block !important; }

        #themes-panels details > summary {
          flex-direction: column !important;
          align-items: center !important;
          text-align: center;
        }
        #themes-panels details > summary img {
          width: 64px !important;
          height: 64px !important;
          object-fit: cover !important;
          margin-bottom: 0.5rem !important;
          border-radius: 0.5rem !important;
        }
        #themes-panels details > summary .flex-1 { text-align: center; }
        #themes-panels details > summary > .group-open\:rotate-90,
        #themes-panels details > summary > div:last-child {
          margin-top: 0.5rem !important;
          margin-left: 0 !important;
        }
      }

    </style>
  </section>

  <!-- All page entries are rendered above as expandable panels; no unexpandable cards are shown below. -->
    <div class="flex justify-between">
      {
        page.url.prev ? (
          <a href={page.url.prev} class="btn btn-ghost my-10 mx-5">
            <svg
              class="h-6 w-6 fill-current md:h-8 md:w-8"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
            >
              <path d="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z" />
            </svg>
            Recent posts
          </a>
        ) : (
          <div></div>
        )
      }
      {
        page.url.next ? (
          <a href={page.url.next} class="btn btn-ghost my-10 mx-5">
            Older Posts
            <svg
              class="h-6 w-6 fill-current md:h-8 md:w-8"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
            >
              <path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" />
            </svg>
          </a>
        ) : (
          <div></div>
        )
      }
    </div>
</BaseLayout>
